import 'package:dart_frog/dart_frog.dart';
import 'package:ht_api/src/config/dependency_container.dart';
import 'package:ht_api/src/middlewares/error_handler.dart';
import 'package:ht_api/src/rbac/permission_service.dart';
import 'package:ht_api/src/services/auth_service.dart';
import 'package:ht_api/src/services/auth_token_service.dart';
import 'package:ht_api/src/services/dashboard_summary_service.dart';
import 'package:ht_api/src/services/token_blacklist_service.dart';
import 'package:ht_api/src/services/user_preference_limit_service.dart';
import 'package:ht_api/src/services/verification_code_storage_service.dart';
import 'package:ht_data_repository/ht_data_repository.dart';
import 'package:ht_email_repository/ht_email_repository.dart';
import 'package:ht_shared/ht_shared.dart';
import 'package:logging/logging.dart';
import 'package:uuid/uuid.dart';

// --- Request ID Wrapper ---

/// {@template request_id}
/// A wrapper class holding a unique identifier (UUID v4) generated for each
/// incoming HTTP request.
///
/// **Purpose:**
/// The primary role of this ID is **traceability for logging and debugging**.
/// It allows developers to follow the entire lifecycle of a *single request*
/// through various middleware, route handlers, repository calls, and potential
/// external service interactions by searching logs for this specific ID.
/// If an error occurs during a request, this ID provides a way to isolate all
/// related log entries for that specific transaction, simplifying debugging.
///
/// **Scope:**
/// - The ID is **transient** for the request itself; it exists only during the
///   request-response cycle.
/// - It is **not persisted** in the main application database alongside models
///   like Headlines or Categories.
/// - Its value lies in being included in **persistent logs**.
///
/// **Distinction from other IDs:**
/// - **User ID:** Identifies the authenticated user making the request. Often
///   logged alongside the `request_id` for user-specific debugging.
/// - **Session ID:** Tracks a user's session across multiple requests.
/// - **Correlation ID:** Often generated by the *client* and passed in headers
///   to link related requests initiated by the client for a larger workflow.
///
/// **Implementation:**
/// This class ensures type safety when providing and reading the request ID
/// from the Dart Frog context using `context.provide<RequestId>` and
/// `context.read<RequestId>()`. This prevents potential ambiguity if other raw
/// strings were provided into the context.
/// {@endtemplate}
class RequestId {
  /// {@macro request_id}
  const RequestId(this.id);

  /// The unique identifier string (UUID v4).
  final String id;
}

// --- Middleware Definition ---
final _log = Logger('RootMiddleware');

Handler middleware(Handler handler) {
  // This is the root middleware for the entire API. It's responsible for
  // providing all shared dependencies to the request context.
  // The order of `.use()` calls is important: the last one in the chain
  // runs first.
  return handler
      // --- Core Middleware ---
      // These run after all dependencies have been provided.
      .use(errorHandler())
      .use(requestLogger())
      // --- Request ID Provider ---
      // This middleware provides a unique ID for each request for tracing.
      // It depends on the Uuid provider, so it must come after it.
      .use((innerHandler) {
        return (context) {
          _log.info('[REQ_LIFECYCLE] Request received. Generating RequestId...');
          final uuid = context.read<Uuid>();
          final requestId = RequestId(uuid.v4());
          _log.info('[REQ_LIFECYCLE] RequestId generated: ${requestId.id}');
          return innerHandler(context.provide<RequestId>(() => requestId));
        };
      })
      // --- Dependency Providers ---
      // These providers inject all repositories and services into the context.
      // They read from the `DependencyContainer` which was populated at startup.
      // This is the first set of middleware to run for any request.
      .use(provider<Uuid>((_) => const Uuid()))
      .use(
        provider<HtDataRepository<Headline>>(
          (_) => DependencyContainer.instance.headlineRepository,
        ),
      )
      .use(
        provider<HtDataRepository<Category>>(
          (_) => DependencyContainer.instance.categoryRepository,
        ),
      )
      .use(
        provider<HtDataRepository<Source>>(
          (_) => DependencyContainer.instance.sourceRepository,
        ),
      )
      .use(
        provider<HtDataRepository<Country>>(
          (_) => DependencyContainer.instance.countryRepository,
        ),
      )
      .use(
        provider<HtDataRepository<User>>(
          (_) => DependencyContainer.instance.userRepository,
        ),
      )
      .use(
        provider<HtDataRepository<UserAppSettings>>(
          (_) => DependencyContainer.instance.userAppSettingsRepository,
        ),
      )
      .use(
        provider<HtDataRepository<UserContentPreferences>>(
          (_) => DependencyContainer.instance.userContentPreferencesRepository,
        ),
      )
      .use(
        provider<HtDataRepository<AppConfig>>(
          (_) => DependencyContainer.instance.appConfigRepository,
        ),
      )
      .use(
        provider<HtEmailRepository>(
          (_) => DependencyContainer.instance.emailRepository,
        ),
      )
      .use(
        provider<TokenBlacklistService>(
          (_) => DependencyContainer.instance.tokenBlacklistService,
        ),
      )
      .use(
        provider<AuthTokenService>(
          (_) => DependencyContainer.instance.authTokenService,
        ),
      )
      .use(
        provider<VerificationCodeStorageService>(
          (_) => DependencyContainer.instance.verificationCodeStorageService,
        ),
      )
      .use(provider<AuthService>((_) => DependencyContainer.instance.authService))
      .use(
        provider<DashboardSummaryService>(
          (_) => DependencyContainer.instance.dashboardSummaryService,
        ),
      )
      .use(
        provider<PermissionService>(
          (_) => DependencyContainer.instance.permissionService,
        ),
      )
      .use(
        provider<UserPreferenceLimitService>(
          (_) => DependencyContainer.instance.userPreferenceLimitService,
        ),
      );
}
